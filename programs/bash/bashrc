CDPATH=".:~/Development:~/Development/resources:~"

shopt -s histappend cmdhist lithist

# If shell is interactive, disable START/STOP output control.
# This allows Ctrl-S to trigger i-search.
if [[ $- = *i* ]]; then
  # -ixon : Disable START/STOP output control.
  # This allows Ctrl-S to trigger i-search.
  stty -ixon
fi

unset -v MAILCHECK

HISTTIMEFORMAT='%F %T '
HISTCONTROL=erasedups:ignorespace
HISTSIZE=10000
HISTFILESIZE=20000

shopt -s no_empty_cmd_completion

export LESS_TERMCAP_md=$'\e[1;37m' \
       LESS_TERMCAP_me=$'\e[0m' \
       LESS_TERMCAP_us=$'\e[0;36m' \
       LESS_TERMCAP_ue=$'\e[0m' \
       LESS="--mouse" \
       MANPAGER="less -s" \
       GROFF_NO_SGR=1

complete -F _tmux t

ghcWithPackages() {
    nix-shell \
        --packages "haskellPackages.ghcWithPackages (p: with p; [${*}])" \
        --run ghci
}

ppath() {
  col_bold="\033[30;01m"
  col_reset="\033[39;49;00m"

  printf '%bPATH%b:\n%s\n' "$col_bold" "$col_reset" "${PATH//:/$'\n'}"
}

psaux() {
    ps aux | grep "$(sed 's/./[&]/' <<< "$1")\|[P]ID"
}

man() {
    # jump to Bash builtin documentation
    if (( $# == 1 )) && [[ "$1" != -* ]]; then
        case "$(type -t "$1")" in
            builtin)
                local pattern="^ *$1"

                if bashdoc_match "${pattern} \+[-[]"; then
                    command man bash | less --pattern="${pattern} +[-[]"
                elif bashdoc_match "${pattern}\b"; then
                    command man bash | less --pattern="${pattern}[[:>:]]"
                else
                    command man bash
                fi
                ;;
            keyword)
                command man bash | less --hilite-search --pattern='^SHELL GRAMMAR$'
                ;;
            *)
                command man "$@"
                ;;
        esac
    else
        command man "$@"
    fi
}

# hacky workaround for vim_configurable's unexposed view/vimdiff outputs
# https://github.com/NixOS/nixpkgs/issues/11442
view() {
    $(__vim_configurable_bin)/view \
        -u $(__vim_configurable_vimrc) "$@"
}
vimdiff() {
    $(__vim_configurable_bin)/vimdiff \
        -u $(__vim_configurable_vimrc) "$@"
}
__vim_configurable_bin() {
    echo $(__vim_configurable_out)/bin
}
__vim_configurable_out() {
    grep -oP '^exec \K/nix/store/[^/]+' \
        $(readlink -f $(which vim))
}
__vim_configurable_vimrc() {
    grep -oP '^exec /nix/store/[^/]+/bin/vim -u \K\S+' \
        $(readlink -f $(which vim))
}

bashdoc_match() {
    { command man bash | col -b | grep -l "$1" ; } >/dev/null 2>&1
}

fdoc() {
  curl dict://dict.org/d:${1}:foldoc
}

blink() {
  if [ "$cursor_code" = 3 ]; then
    cursor_code=0
  else
    cursor_code=3
  fi
  printf '\e[%i q' $cursor_code
}

# gsettings

superswap() {
    local old new swap

    old=$(gsettings get org.gnome.desktop.input-sources xkb-options)
    old="${old/#@as /}"  # remove type annotation

    swap="'altwin:swap_alt_win'"

    if grep -q "$swap" <<< "$old"; then
        new="${old//$swap}"      # remove swap
    else
        new="${old/%]/, $swap]}" # append swap
    fi

    new="${new/#[, /[}"  # remove leading comma
    new="${new/%, ]/]}"  # remove trailing comma
    new="${new//, ,/,}"  # remove embedded comma

    gsettings set org.gnome.desktop.input-sources xkb-options "$new"
}

font_size() {
    local size="$1"
    gnome_terminal_set font "Source Code Pro ${size}"
}

gnome_terminal_set() {
  local key=$1 val=$2
  gsettings set "$(gnome_terminal_profile)" "$key" "$val"
}

gnome_terminal_profile() {
  local schema uuid
  schema='org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles'
  uuid=$(gsettings get org.gnome.Terminal.ProfilesList default)
  printf '%s:/:%s/' ${schema} "${uuid:1:-1}"
}
