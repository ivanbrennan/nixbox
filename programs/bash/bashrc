# NOTE: CDPATH should not be exported, because it can interfere with
# scripts that call cd.
CDPATH=".:~/Development:~/Development/code:~/Development/resources:~"

shopt -s histappend cmdhist lithist

# If shell is interactive, disable START/STOP output control.
# This allows Ctrl-S to trigger i-search.
if [[ $- = *i* ]]; then
  stty -ixon
fi

unset -v MAILCHECK

HISTTIMEFORMAT='%F %T '
HISTCONTROL=erasedups:ignorespace
HISTSIZE=10000
HISTFILESIZE=20000

shopt -s no_empty_cmd_completion

export LESS_TERMCAP_md=$'\e[1;37m' \
       LESS_TERMCAP_me=$'\e[0m' \
       LESS_TERMCAP_us=$'\e[0;36m' \
       LESS_TERMCAP_ue=$'\e[0m' \
       MANPAGER="less -s" \
       GROFF_NO_SGR=1

if [[ "${TERM-}" == 'rxvt-unicode-256color' ]] || [[ -n "${TMUX-}" ]]
then
    # Some terminals (e.g. alacritty) provide more responsive solutions
    # to scrolling inside less, so we only apply this solution in cases
    # where scrolling would be otherwise unavailable.
    export LESS="--mouse --wheel-lines=3"
    # NOTE: does this break mouse selection in less?
fi

# Provide a function to manually disable focus notify events, in case detaching
# an abduco session from within Neovim drops us back into an interactive shell.
# Since Neovim doesn't know about the detach, it doesn't tell the terminal to
# stop sending focus notify events, and as a result, the terminal will print
# control sequences (^[[I, ^[[O) to the screen upon FocusIn/FocusOut events.
disable-focus-notify() {
    echo -ne '\e[?1004l'
}
enable-focus-notify() {
    echo -ne '\e[?1004h'
}
# Workaround for abduco alternate screen buffer issues
# https://github.com/martanne/abduco/issues/35#issuecomment-901738018
abduco-attach() {
    (
        until abduco | grep -q "\*.*${1}"
        do
            sleep 0.01
        done && echo "tput rmcup" | abduco -a "${1}" &
    )
    abduco -a "${1}"
}

complete -F _tmux t

ghcWithPackages() {
    nix-shell \
        --packages "haskellPackages.ghcWithPackages (p: with p; [${*}])"
}

nix-revision() {
    cat $(grep -oP '\bnixpkgs=\K[^:]+' <<< "$NIX_PATH")/.git-revision
}

quietphones() {
    # https://unix.stackexchange.com/questions/336790/how-to-disable-white-noise-with-headphones-in-dell-xps
    amixer --card 0 set 'Headphone Mic Boost' 10db
}

ppath() {
  col_bold="\033[30;01m"
  col_reset="\033[39;49;00m"

  printf '%bPATH%b:\n%s\n' "$col_bold" "$col_reset" "${PATH//:/$'\n'}"
}

psaux() {
    ps aux | grep "$(sed 's/./[&]/' <<< "$1")\|[P]ID"
}

man() {
    # jump to Bash builtin documentation
    if (( $# == 1 )) && [[ "$1" != -* ]]; then
        case "$(type -t "$1")" in
            builtin)
                local pattern="^ *$1"

                if bashdoc_match "${pattern} \+[-[]"; then
                    command man bash | less --pattern="${pattern} +[-[]"
                elif bashdoc_match "${pattern}\b"; then
                    command man bash | less --pattern="${pattern}[[:>:]]"
                else
                    command man bash
                fi
                ;;
            keyword)
                command man bash | less --hilite-search --pattern='^SHELL GRAMMAR$'
                ;;
            *)
                command man "$@"
                ;;
        esac
    else
        command man "$@"
    fi
}

# hacky workaround for vim_configurable's unexposed view/vimdiff outputs
# https://github.com/NixOS/nixpkgs/issues/11442
view() {
    $(__vim_configurable_bin)/view \
        -u $(__vim_configurable_vimrc) "$@"
}
vimdiff() {
    $(__vim_configurable_bin)/vimdiff \
        -u $(__vim_configurable_vimrc) "$@"
}
__vim_configurable_bin() {
    echo $(__vim_configurable_out)/bin
}
__vim_configurable_out() {
    grep -oP '^exec \K/nix/store/[^/]+' \
        $(readlink -f $(which vim))
}
__vim_configurable_vimrc() {
    grep -oP '^exec /nix/store/[^/]+/bin/vim -u \K\S+' \
        $(readlink -f $(which vim))
}

bashdoc_match() {
    { command man bash | col -b | grep -l "$1" ; } >/dev/null 2>&1
}

fdoc() {
  curl dict://dict.org/d:${1}:foldoc
}

opf() {
    local items
    items=$(op list items)
    if [ $? -eq 0 ]
    then
        op get item "$(jq -r 'map(.overview.title) | .[]' <<< "$items" | fzf)"
    fi
}

realink() {
    readlink -f $(which "$1")
}
complete -c realink

blink() {
  if [ "$cursor_code" = 3 ]; then
    cursor_code=0
  else
    cursor_code=3
  fi
  printf '\e[%i q' $cursor_code
}

show_color() {
    perl -e '
      foreach $a (@ARGV) {
        $code = join(":", unpack("C*", pack("H*", $a)));
        print "\e[48:2::${code}m        \e[49m ${a}\n";
      }
    ' "$@"
}

xcolors() {
    while true
    do
        show_color "$(xcolor --custom='%{02hr}%{02hg}%{02hb}')"
    done
}

# gsettings

superswap() {
    local old new swap

    old=$(gsettings get org.gnome.desktop.input-sources xkb-options)
    old="${old/#@as /}"  # remove type annotation

    swap="'altwin:swap_alt_win'"

    if grep -q "$swap" <<< "$old"; then
        new="${old//$swap}"      # remove swap
    else
        new="${old/%]/, $swap]}" # append swap
    fi

    new="${new/#[, /[}"  # remove leading comma
    new="${new/%, ]/]}"  # remove trailing comma
    new="${new//, ,/,}"  # remove embedded comma

    gsettings set org.gnome.desktop.input-sources xkb-options "$new"
}

font_size() {
    local size="$1"
    gnome_terminal_set font "Source Code Pro ${size}"
}

gnome_terminal_set() {
  local key=$1 val=$2
  gsettings set "$(gnome_terminal_profile)" "$key" "$val"
}

gnome_terminal_profile() {
  local schema uuid
  schema='org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles'
  uuid=$(gsettings get org.gnome.Terminal.ProfilesList default)
  printf '%s:/:%s/' ${schema} "${uuid:1:-1}"
}
