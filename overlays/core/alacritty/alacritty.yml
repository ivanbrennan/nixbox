# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Import additional configuration files
#
# Imports are loaded in order, skipping all missing files, with the importing
# file being loaded last. If a field is already present in a previous import, it
# will be replaced.
#
# All imports must either be absolute paths starting with `/`, or paths relative
# to the user's home directory starting with `~/`.
#import:
#  - /path/to/alacritty.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: alacritty-direct

window:
  # Window dimensions (changes require restart)
  #
  # Number of lines/columns (not pixels) in the terminal. Both lines and columns
  # must be non-zero for this to take effect. The number of columns must be at
  # least `2`, while using a value of `0` for columns and lines will fall back
  # to the window manager's recommended size
  dimensions:
    columns: 80
    lines: 24

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 4
    y: 4

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background and no title bar buttons
  decorations: full

  # Background opacity
  #
  # Window opacity as a floating point number from `0.0` to `1.0`.
  # The value `0.0` is completely transparent and `1.0` is opaque.
  opacity: 1.0

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

  # Window title
  #title: Alacritty

  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  # Decorations theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme/Wayland client side decorations.
  # Commonly supported values are `dark` and `light`. Set this to `None` to use
  # the default theme variant.
  decorations_theme_variant: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Scrolling distance multiplier.
  multiplier: 3

# Font configuration
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    family: Source Code Pro

    # The `style` can be specified to pick a specific face.
    #style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    family: Source Code Pro

    # The `style` can be specified to pick a specific face.
    #style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: Liberation Mono

    # The `style` can be specified to pick a specific face.
    #style: Italic

  # Bold italic font face
  #bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Bold Italic

  # Point size
  size: 14.0

  # Offset is the extra space around each character. `offset.y` can be thought
  # of as modifying the line spacing, and `offset.x` as modifying the letter
  # spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the
  # right, increasing `y` moves the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # Use built-in font for box drawing characters.
  #
  # If `true`, Alacritty will use a custom built-in font for box drawing
  # characters (Unicode points 2500 - 259f).
  #
  #builtin_box_drawing: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors
color_schemes:
  moot: &dark
    primary:
      background: '#181818'
      foreground: '#d5d8dc'

      # Bright and dim foreground colors
      #
      # The dimmed foreground color is calculated automatically if it is not
      # present. If the bright foreground color is not set, or
      # `draw_bold_text_with_bright_colors` is `false`, the normal foreground
      # color will be used.
      #dim_foreground: '#9a9a9a'
      #bright_foreground: '#ffffff'

    # Cursor colors
    #
    # Colors which should be used to draw the terminal cursor.
    #
    # Allowed values are CellForeground/CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    cursor:
      text:   '#191e22'
      cursor: '#d2d8e3'

    # Vi mode cursor colors
    #
    # Colors for the cursor when the vi mode is active.
    #
    # Allowed values are CellForeground/CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    vi_mode_cursor:
      text: '#ffffff'
      cursor: '#404656'

    # Search colors
    #
    # Colors used for the search bar and match highlighting.
    search:
      # Allowed values are CellForeground/CellBackground, which reference the
      # affected cell, or hexadecimal colors like #ff00ff.
      matches:
        foreground: '#f8bb39'
        background: '#181818'
      focused_match:
        foreground: '#181818'
        background: '#f8bb39'

    # Keyboard regex hints
    #hints:
      # First character in the hint label
      #
      # Allowed values are CellForeground/CellBackground, which reference the
      # affected cell, or hexadecimal colors like #ff00ff.
      #start:
      #  foreground: '#1d1f21'
      #  background: '#e9ff5e'

      # All characters after the first one in the hint label
      #
      # Allowed values are CellForeground/CellBackground, which reference the
      # affected cell, or hexadecimal colors like #ff00ff.
      #end:
      #  foreground: '#e9ff5e'
      #  background: '#1d1f21'

    # Line indicator
    #
    # Color used for the indicator displaying the position in history during
    # search and vi mode.
    #
    # By default, these will use the opposing primary color.
    line_indicator:
      foreground: '#99aab6'
      background: '#1f1f1f'

    # Footer bar
    #
    # Color used for the footer bar on the bottom, used by search regex input,
    # hyperlink URI preview, etc.
    #
    footer_bar:
      background: '#272727'
      foreground: '#c4d5e5'

    # Selection colors
    #
    # Colors which should be used to draw the selection area.
    #
    # Allowed values are CellForeground/CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    selection:
      text: '#ffffff'
      background: '#323848'

    # Normal colors
    normal:
      black:   '#181818'
      red:     '#de4d3a'
      green:   '#b8e068'
      yellow:  '#ebcb8b'
      blue:    '#61b3c9'
      magenta: '#617fa0'
      cyan:    '#69d2e7'
      white:   '#d5d8dc'

    # Bright colors
    bright:
      black:   '#303d4b'
      red:     '#f4718c'
      green:   '#d8e778'
      yellow:  '#f7c352'
      blue:    '#a1b3c9'
      magenta: '#53769d'
      cyan:    '#26a6a6'
      white:   '#ffffff'

    # Dim colors
    #
    # If the dim colors are not set, they will be calculated automatically based
    # on the `normal` colors.
    dim:
      black:   '#14171d'
      red:     '#943326'
      green:   '#7b9545'
      yellow:  '#bda370'
      blue:    '#407786'
      magenta: '#40546b'
      cyan:    '#3b7681'
      white:   '#6a6c6e'

    # Indexed Colors
    #
    # The indexed colors include all colors from 16 to 256.
    # When these are not set, they're filled with sensible defaults.
    #
    # Example:
    #   `- { index: 16, color: '#ff00ff' }`
    #
    indexed_colors: []

  blight: &light
    primary:
      background: '#f7f8f8'
      foreground: '#424242'

    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text:   '#ffffff'
      cursor: '#555753'

    # Normal colors
    normal:
      black:   '#2e3436'
      red:     '#aa1100'
      green:   '#4e9a06'
      yellow:  '#c4a000'
      blue:    '#045060'
      magenta: '#75507b'
      cyan:    '#008482'
      white:   '#878a85'

    # Bright colors
    bright:
      black:   '#555753'
      red:     '#f9251f'
      green:   '#138b59'
      yellow:  '#ff4400'
      blue:    '#0479ba'
      magenta: '#a8006e'
      cyan:    '#009e9c'
      white:   '#a0a39d'

    # Dim colors (Optional)
    dim:
      black:   '#f7f8f8'
      red:     '#cc0000'
      green:   '#4e9a06'
      yellow:  '#c4a000'
      blue:    '#3465a4'
      magenta: '#75507b'
      cyan:    '#008482'
      white:   '#878a85'

  nord: &nord
    primary:
      background: '#2E3440'
      foreground: '#D8DEE9'

    # Colors the cursor will use if `custom_cursor_colors` is true
    cursor:
      text:   '#3B4252'
      cursor: '#D8DEE9'

    # Normal colors
    normal:
      black:   '#3B4252'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#88C0D0'
      white:   '#E5E9F0'

    # Bright colors
    bright:
      black:   '#4C566A'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#8FBCBB'
      white:   '#ECEFF4'

    # Dim colors (Optional)
    dim:
      black:   '#3B4252'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#88C0D0'
      white:   '#E5E9F0'

colors: *dark

  # Transparent cell backgrounds
  #
  # Whether or not `window.opacity` applies to all cell backgrounds or only to
  # the default background. When set to `true` all cells will be transparent
  # regardless of their background color.
  #transparent_background_colors: false

# Bell
#
# The bell is rung every time the BEL control character is received.
#bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  #animation: EaseOutExpo

  # Duration of the visual bell flash in milliseconds. A `duration` of `0` will
  # disable the visual bell animation.
  #duration: 0

  # Visual bell animation color.
  #color: '#ffffff'

  # Bell Command
  #
  # This program is executed whenever the bell is rung.
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  #command: None

selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

cursor:
  # Cursor style
  style:
    # Cursor shape
    #
    # Values for `shape`:
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
    shape: Block

    # Cursor blinking state
    #
    # Values for `blinking`:
    #   - Never: Prevent the cursor from ever blinking
    #   - Off: Disable blinking by default
    #   - On: Enable blinking by default
    #   - Always: Force the cursor to always blink
    blinking: Off

  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  #vi_mode_style: None

  # Cursor blinking interval in milliseconds.
  #blink_interval: 750

  # Time after which cursor stops blinking, in seconds.
  #
  # Specifying '0' will disable timeout for blinking.
  #blink_timeout: 5

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g.
# `/bin/fish`. Entries in `shell.args` are passed unmodified as arguments to the
# shell.
#
# Default:
#   - (Linux/BSD/macOS) `$SHELL` or the user's login shell, if `$SHELL` is unset
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

# Offer IPC using `alacritty msg` (unix only)
#ipc_socket: true

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 400 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

# Hints
#
# Terminal hints can be used to find text or hyperlink in the visible part of
# the terminal and pipe it to other applications.
#hints:
  # Keys used for the hint labels.
  #alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  #
  # Each hint must have any of `regex` or `hyperlinks` field and either an
  # `action` or a `command` field. The fields `mouse`, `binding` and
  # `post_processing` are optional.
  #
  # The `hyperlinks` option will cause OSC 8 escape sequence hyperlinks to be
  # highlighted.
  #
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs and applies only to
  # `regex` matches.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  #enabled:
  # - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
  #           [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
  #   hyperlinks: true
  #   command: xdg-open
  #   post_processing: true
  #   mouse:
  #     enabled: true
  #     mods: None
  #   binding:
  #     key: U
  #     mods: Control|Shift

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings for actions not exclusive to mouse mode)
#
# - Mouse exclusive actions:
#
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Right,                 action: ExpandSelection }
  - { mouse: Right,  mods: Control, action: ExpandSelection }
  - { mouse: Middle, mode: ~Vi,     action: PasteSelection  }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#   - SearchBackward
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#   - CenterAroundViCursor
#   - SearchNext
#   - SearchPrevious
#   - SearchStart
#   - SearchEnd
#
#   Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#   - PasteSelection: Pastes from selection buffer
#
#   - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
#
# ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
# https://github.com/alexherbo2/alacritty-extended-keys/blob/master/keys.yml
# Fix keyboard input on terminals: http://www.leonerd.org.uk/hacks/fixterms/
# Key names: https://docs.rs/glutin/latest/glutin/event/enum.VirtualKeyCode.html
#
# Useful commands to get code-points and key names:
#
# showkey --ascii
# alacritty --print-events
# ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
key_bindings:
  - { key: Paste,                                        action: Paste          }
  - { key: Copy,                                         action: Copy           }
  - { key: L,         mods: Control,                     action: ClearLogNotice }
  - { key: L,         mods: Control, mode: ~Vi|~Search,  chars: "\x0c"          }
  - { key: PageUp,    mods: Shift,   mode: ~Alt,         action: ScrollPageUp   }
  - { key: PageDown,  mods: Shift,   mode: ~Alt,         action: ScrollPageDown }
  - { key: Home,      mods: Shift,   mode: ~Alt,         action: ScrollToTop    }
  - { key: End,       mods: Shift,   mode: ~Alt,         action: ScrollToBottom }
  - { key: Tab,       mods: Shift,                       chars: "\x1b[Z"        }

  # Vi Mode
  - { key: Space,  mods: Shift,         mode: Vi|~Search,  action: ScrollPageUp            }
  - { key: Space,                       mode: Vi|~Search,  action: ScrollPageDown          }
  - { key: Space,  mods: Shift,         mode: ~Vi|~Search, action: ToggleViMode            }
  - { key: Escape,                      mode: Vi|~Search,  action: ToggleViMode            }
  - { key: Escape,                      mode: Vi|~Search,  action: ScrollToBottom          }
  - { key: Escape,                      mode: Vi|~Search,  action: ClearSelection          }
  - { key: Q,                           mode: Vi|~Search,  action: ToggleViMode            }
  - { key: Q,                           mode: Vi|~Search,  action: ScrollToBottom          }
  - { key: Q,                           mode: Vi|~Search,  action: ClearSelection          }
  - { key: I,                           mode: Vi|~Search,  action: ToggleViMode            }
  - { key: I,                           mode: Vi|~Search,  action: ScrollToBottom          }
  - { key: K,      mods: Control,       mode: Vi|~Search,  action: ScrollLineUp            }
  - { key: J,      mods: Control,       mode: Vi|~Search,  action: ScrollLineDown          }
  - { key: G,                           mode: Vi|~Search,  action: ScrollToTop             }
  - { key: G,      mods: Shift,         mode: Vi|~Search,  action: ScrollToBottom          }
  - { key: B,      mods: Control,       mode: Vi|~Search,  action: ScrollPageUp            }
  - { key: F,      mods: Control,       mode: Vi|~Search,  action: ScrollPageDown          }
  - { key: Y,                           mode: Vi|~Search,  action: Copy                    }
  - { key: Y,                           mode: Vi|~Search,  action: ToggleViMode            }
  - { key: Y,                           mode: Vi|~Search,  action: ScrollToBottom          }
  - { key: Y,                           mode: Vi|~Search,  action: ClearSelection          }
  - { key: Y,      mods: Shift,         mode: Vi|~Search,  action: ToggleNormalSelection   }
  - { key: Y,      mods: Shift,         mode: Vi|~Search,  action: Last                    }
  - { key: Y,      mods: Shift,         mode: Vi|~Search,  action: Copy                    }
  - { key: Y,      mods: Shift,         mode: Vi|~Search,  action: ToggleViMode            }
  - { key: Y,      mods: Shift,         mode: Vi|~Search,  action: ScrollToBottom          }
  - { key: Y,      mods: Shift,         mode: Vi|~Search,  action: ClearSelection          }
  - { key: Copy,                        mode: Vi|~Search,  action: ClearSelection          }
  - { key: V,                           mode: Vi|~Search,  action: ToggleNormalSelection   }
  - { key: V,      mods: Shift,         mode: Vi|~Search,  action: ToggleLineSelection     }
  - { key: V,      mods: Control,       mode: Vi|~Search,  action: ToggleBlockSelection    }
  - { key: V,      mods: Alt,           mode: Vi|~Search,  action: ToggleSemanticSelection }
  - { key: Return,                      mode: Vi|~Search,  action: Open                    }
  - { key: Z,                           mode: Vi|~Search,  action: CenterAroundViCursor    }
  - { key: K,                           mode: Vi|~Search,  action: Up                      }
  - { key: J,                           mode: Vi|~Search,  action: Down                    }
  - { key: H,                           mode: Vi|~Search,  action: Left                    }
  - { key: L,                           mode: Vi|~Search,  action: Right                   }
  - { key: Up,                          mode: Vi|~Search,  action: Up                      }
  - { key: Down,                        mode: Vi|~Search,  action: Down                    }
  - { key: Left,                        mode: Vi|~Search,  action: Left                    }
  - { key: Right,                       mode: Vi|~Search,  action: Right                   }
  - { key: Key0,                        mode: Vi|~Search,  action: First                   }
  - { key: A,      mods: Control,       mode: Vi|~Search,  action: First                   }
  - { key: E,      mods: Control,       mode: Vi|~Search,  action: Last                    }
  - { key: Key4,   mods: Shift,         mode: Vi|~Search,  action: Last                    }
  - { key: Key6,   mods: Shift,         mode: Vi|~Search,  action: FirstOccupied           }
  - { key: H,      mods: Shift,         mode: Vi|~Search,  action: High                    }
  - { key: M,      mods: Shift,         mode: Vi|~Search,  action: Middle                  }
  - { key: L,      mods: Shift,         mode: Vi|~Search,  action: Low                     }
  - { key: B,                           mode: Vi|~Search,  action: SemanticLeft            }
  - { key: W,                           mode: Vi|~Search,  action: SemanticRight           }
  - { key: E,                           mode: Vi|~Search,  action: SemanticRightEnd        }
  - { key: B,      mods: Shift,         mode: Vi|~Search,  action: WordLeft                }
  - { key: W,      mods: Shift,         mode: Vi|~Search,  action: WordRight               }
  - { key: E,      mods: Shift,         mode: Vi|~Search,  action: WordRightEnd            }
  - { key: Key5,   mods: Shift,         mode: Vi|~Search,  action: Bracket                 }
  - { key: Slash,                       mode: Vi|~Search,  action: SearchForward           }
  # NOTE: Slash with modifiers isn't being recognized, so we use the scancode directly.
  - { key: 53,     mods: Shift,         mode: Vi|~Search,  action: SearchBackward          }
  - { key: N,                           mode: Vi|~Search,  action: SearchNext              }
  - { key: N,      mods: Shift,         mode: Vi|~Search,  action: SearchPrevious          }

  - { key: Slash,    mods: Control,  mode: ~Vi|~Search,      action: ToggleViMode    }
  - { key: Slash,    mods: Control,  mode: ~Vi|~Search,      action: SearchBackward  }

  # Search Mode
  - { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
  - { key: Escape,                mode: Search,     action: SearchCancel          }
  - { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
  - { key: U,      mods: Control, mode: Search,     action: SearchClear           }
  - { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
  - { key: P,      mods: Alt,     mode: Search,     action: SearchHistoryPrevious }
  - { key: N,      mods: Alt,     mode: Search,     action: SearchHistoryNext     }
  - { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
  - { key: Down,                  mode: Search,     action: SearchHistoryNext     }
  - { key: P,      mods: Control, mode: Search,     action: SearchFocusNext       }
  - { key: N,      mods: Control, mode: Search,     action: SearchFocusPrevious   }

  # (Windows, Linux, and BSD only)
  #- { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
  #- { key: C,              mods: Control|Shift,                   action: Copy             }
  #- { key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    }
  #- { key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
  - { key: R,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
  #- { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
  #- { key: Insert,         mods: Shift,                           action: PasteSelection   }
  #- { key: Key0,           mods: Control,                         action: ResetFontSize    }
  #- { key: Equals,         mods: Control,                         action: IncreaseFontSize }
  #- { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
  #- { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }
  #- { key: Minus,          mods: Control,                         action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,         mods: Alt,                     action: ToggleFullscreen }

  # (macOS only)
  #- { key: K,              mods: Command, mode: ~Vi|~Search, chars: "\x0c"                 }
  #- { key: K,              mods: Command, mode: ~Vi|~Search, action: ClearHistory          }
  #- { key: Key0,           mods: Command,                    action: ResetFontSize         }
  #- { key: Equals,         mods: Command,                    action: IncreaseFontSize      }
  #- { key: NumpadAdd,      mods: Command,                    action: IncreaseFontSize      }
  #- { key: Minus,          mods: Command,                    action: DecreaseFontSize      }
  #- { key: V,              mods: Command,                    action: Paste                 }
  #- { key: C,              mods: Command,                    action: Copy                  }
  #- { key: C,              mods: Command, mode: Vi|~Search,  action: ClearSelection        }
  #- { key: H,              mods: Command,                    action: Hide                  }
  #- { key: H,              mods: Command|Alt,                action: HideOtherApplications }
  #- { key: M,              mods: Command,                    action: Minimize              }
  #- { key: Q,              mods: Command,                    action: Quit                  }
  #- { key: W,              mods: Command,                    action: Quit                  }
  #- { key: N,              mods: Command,                    action: SpawnNewInstance      }
  #- { key: F,              mods: Command|Control,            action: ToggleFullscreen      }
  #- { key: F,              mods: Command, mode: ~Search,     action: SearchForward         }
  #- { key: B,              mods: Command, mode: ~Search,     action: SearchBackward        }

  # (Custom)
  - { key: V,               mods: Control|Alt,             action: Paste               }
  - { key: C,               mods: Control|Alt,             action: Copy                }
  - { key: C,               mods: Control|Alt, mode: Vi,   action: ClearSelection      }
  - { key: Return,          mods: Shift,                   chars: "\x1b[13;2u"         }
  - { key: Return,          mods: Alt|Shift,               chars: "\x1b[13;4u"         }
  - { key: Return,          mods: Control,                 chars: "\x1b[13;5u"         }
  - { key: Space,           mods: Alt|Shift,               chars: "\x1b[32;4u"         }
  - { key: Space,           mods: Control|Shift,           chars: "\x1b[32;6u"         }
  - { key: Space,           mods: Control,                 chars: "\x00"               }
  - { key: Minus,           mods: Alt,                     chars: "\x1b-"              }
  - { key: Minus,           mods: Alt|Shift,               chars: "\x1b_"              }
  - { key: Backslash,       mods: Alt,                     chars: "\x1b\\"             }
  - { key: Backslash,       mods: Alt|Shift,               chars: "\x1b|"              }
  - { key: Comma,           mods: Control,                 chars: "\x1b[44;5u"         }
  - { key: Comma,           mods: Alt,                     chars: "\x1b,"              }
  - { key: Comma,           mods: Alt|Shift,               chars: "\x1b<"              }
  - { key: Period,          mods: Control,                 chars: "\x1b[46;5u"         }
  - { key: Period,          mods: Alt,                     chars: "\x1b."              }
  - { key: Period,          mods: Alt|Shift,               chars: "\x1b>"              }
  - { key: Semicolon,       mods: Control,                 chars: "\x1b[59;5u"         }
  - { key: Grave,           mods: Alt,                     chars: "\x1b`"              }
  - { key: Grave,           mods: Alt|Shift,               chars: "\x1b~"              }
  - { key: F,               mods: Alt|Control,             action: ToggleFullscreen    }
  - { key: N,               mods: Alt|Shift|Control,       action: SpawnNewInstance    }
  - { key: A,               mods: Alt,                     chars: "\x1ba"              }
  - { key: B,               mods: Alt,                     chars: "\x1bb"              }
  - { key: C,               mods: Alt,                     chars: "\x1bc"              }
  - { key: D,               mods: Alt,                     chars: "\x1bd"              }
  - { key: E,               mods: Alt,                     chars: "\x1be"              }
  - { key: F,               mods: Alt,                     chars: "\x1bf"              }
  - { key: G,               mods: Alt,                     chars: "\x1bg"              }
  - { key: H,               mods: Alt,                     chars: "\x1bh"              }
  - { key: I,               mods: Alt,                     chars: "\x1bi"              }
  - { key: I,               mods: Control,                 chars: "\x1b[105;5u"        }
  - { key: J,               mods: Alt,                     chars: "\x1bj"              }
  - { key: K,               mods: Alt,                     chars: "\x1bk"              }
  - { key: L,               mods: Alt,                     chars: "\x1bl"              }
  - { key: M,               mods: Alt,                     chars: "\x1bm"              }
  - { key: N,               mods: Alt, mode: ~Search,      chars: "\x1bn"              }
  - { key: O,               mods: Alt,                     chars: "\x1bo"              }
  - { key: P,               mods: Alt, mode: ~Search,      chars: "\x1bp"              }
  - { key: Q,               mods: Alt,                     chars: "\x1bq"              }
  - { key: R,               mods: Alt,                     chars: "\x1br"              }
  - { key: S,               mods: Alt,                     chars: "\x1bs"              }
  - { key: T,               mods: Alt,                     chars: "\x1bt"              }
  - { key: U,               mods: Alt,                     chars: "\x1bu"              }
  - { key: V,               mods: Alt,                     chars: "\x1bv"              }
  - { key: W,               mods: Alt,                     chars: "\x1bw"              }
  - { key: X,               mods: Alt,                     chars: "\x1bx"              }
  - { key: Y,               mods: Alt,                     chars: "\x1by"              }
  - { key: Z,               mods: Alt,                     chars: "\x1bz"              }
  - { key: A,               mods: Alt|Shift,               chars: "\x1bA"              }
  - { key: B,               mods: Alt|Shift,               chars: "\x1bB"              }
  - { key: C,               mods: Alt|Shift,               chars: "\x1bC"              }
  - { key: D,               mods: Alt|Shift,               chars: "\x1bD"              }
  - { key: E,               mods: Alt|Shift,               chars: "\x1bE"              }
  - { key: F,               mods: Alt|Shift,               chars: "\x1bF"              }
  - { key: G,               mods: Alt|Shift,               chars: "\x1bG"              }
  - { key: H,               mods: Alt|Shift,               chars: "\x1bH"              }
  - { key: I,               mods: Alt|Shift,               chars: "\x1bI"              }
  - { key: J,               mods: Alt|Shift,               chars: "\x1bJ"              }
  - { key: K,               mods: Alt|Shift,               chars: "\x1bK"              }
  - { key: L,               mods: Alt|Shift,               chars: "\x1bL"              }
  - { key: M,               mods: Alt|Shift,               chars: "\x1bM"              }
  - { key: N,               mods: Alt|Shift,               chars: "\x1bN"              }
  - { key: O,               mods: Alt|Shift,               chars: "\x1bO"              }
  - { key: P,               mods: Alt|Shift,               chars: "\x1bP"              }
  - { key: Q,               mods: Alt|Shift,               chars: "\x1bQ"              }
  - { key: R,               mods: Alt|Shift,               chars: "\x1bR"              }
  - { key: S,               mods: Alt|Shift,               chars: "\x1bS"              }
  - { key: T,               mods: Alt|Shift,               chars: "\x1bT"              }
  - { key: U,               mods: Alt|Shift,               chars: "\x1bU"              }
  - { key: V,               mods: Alt|Shift,               chars: "\x1bV"              }
  - { key: W,               mods: Alt|Shift,               chars: "\x1bW"              }
  - { key: X,               mods: Alt|Shift,               chars: "\x1bX"              }
  - { key: Y,               mods: Alt|Shift,               chars: "\x1bY"              }
  - { key: Z,               mods: Alt|Shift,               chars: "\x1bZ"              }
  - { key: A,               mods: Control|Shift,           chars: "\x1b[65;6u"         }
  - { key: B,               mods: Control|Shift,           chars: "\x1b[66;6u"         }
  - { key: D,               mods: Control|Shift,           chars: "\x1b[68;6u"         }
  - { key: E,               mods: Control|Shift,           chars: "\x1b[69;6u"         }
  - { key: G,               mods: Control|Shift,           chars: "\x1b[71;6u"         }
  - { key: H,               mods: Control|Shift,           chars: "\x1b[72;6u"         }
  - { key: I,               mods: Control|Shift,           chars: "\x1b[73;6u"         }
  - { key: J,               mods: Control|Shift,           chars: "\x1b[74;6u"         }
  - { key: K,               mods: Control|Shift,           chars: "\x1b[75;6u"         }
  - { key: L,               mods: Control|Shift,           chars: "\x1b[76;6u"         }
  - { key: M,               mods: Control|Shift,           chars: "\x1b[77;6u"         }
  - { key: N,               mods: Control|Shift,           chars: "\x1b[78;6u"         }
  - { key: O,               mods: Control|Shift,           chars: "\x1b[79;6u"         }
  - { key: P,               mods: Control|Shift,           chars: "\x1b[80;6u"         }
  - { key: Q,               mods: Control|Shift,           chars: "\x1b[81;6u"         }
  - { key: R,               mods: Control|Shift,           chars: "\x1b[82;6u"         }
  - { key: S,               mods: Control|Shift,           chars: "\x1b[83;6u"         }
  - { key: T,               mods: Control|Shift,           chars: "\x1b[84;6u"         }
  - { key: W,               mods: Control|Shift,           chars: "\x1b[87;6u"         }
  - { key: X,               mods: Control|Shift,           chars: "\x1b[88;6u"         }
  - { key: Y,               mods: Control|Shift,           chars: "\x1b[89;6u"         }
  - { key: Z,               mods: Control|Shift,           chars: "\x1b[90;6u"         }
  - { key: Key1,            mods: Alt,                     chars: "\x1b1"              }
  - { key: Key2,            mods: Alt,                     chars: "\x1b2"              }
  - { key: Key3,            mods: Alt,                     chars: "\x1b3"              }
  - { key: Key4,            mods: Alt,                     chars: "\x1b4"              }
  - { key: Key5,            mods: Alt,                     chars: "\x1b5"              }
  - { key: Key6,            mods: Alt,                     chars: "\x1b6"              }
  - { key: Key7,            mods: Alt,                     chars: "\x1b7"              }
  - { key: Key8,            mods: Alt,                     chars: "\x1b8"              }
  - { key: Key9,            mods: Alt,                     chars: "\x1b9"              }
  - { key: Key0,            mods: Alt,                     chars: "\x1b0"              }
  - { key: Key3,            mods: Alt|Shift,               chars: "\x1b#"              }
  - { key: Key5,            mods: Alt|Shift,               chars: "\x1b%"              }
  - { key: Key6,            mods: Alt|Shift,               chars: "\x1b^"              }
  - { key: Key8,            mods: Alt|Shift,               chars: "\x1b*"              }

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - Off
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false

  # Highlight window damage information.
  #highlight_damage: false
